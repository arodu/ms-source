#!/usr/bin/env node

require('module-alias/register')

/**
 * Module dependencies.
 */

const {app, priv_app} = require("../dist/app");
//const debug = require("debug")("crud-nodejs-mongodb:server");
const config = require("../dist/configs/app.js");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.default.port);
app.set("port", port);

const priv_port = 9001

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);


/**
 * Create Private HTTP server.
 */
const priv_server = http.createServer(priv_app);
priv_server.listen(priv_port);
priv_server.on("error", onError);
priv_server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = this.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
  //console.log("http://127.0.0.1:" + addr.port);
}
